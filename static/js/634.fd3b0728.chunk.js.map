{"version":3,"file":"static/js/634.fd3b0728.chunk.js","mappings":"0HAYA,I,gCAFMA,EAAS,GACTC,EAAU,GACPC,EAAI,EAAGA,EAAI,IAAMA,IACxBD,EAAQE,KAAKC,KAAKC,UAClBL,EAAOG,KAAKC,KAAKC,UACjBL,EAAOG,KAAKC,KAAKC,UACjBL,EAAOG,KAAKC,KAAKC,SAAW,IA6F9B,UAvFA,SAAiBC,GACf,IAAMC,GAAUC,EAAAA,EAAAA,QAAO,MAIvB,OACE,iBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAS,WAC5C,gBACEF,MAAO,CACLG,SAAU,WACVC,IAAK,OACLC,KAAM,OACNC,OAAQ,EACRC,OAAQ,GAEVC,IAAKV,KAEP,UAAC,KAkBC,YAEA,SAAC,KAAsB,CACrBW,GAAG,OACHC,OAAQ,CAGNC,iCAAiC,GAEnCC,eAAgB,CAAC,EAAG,IACpBC,eAAe,uBACfC,eAAa,EACbC,eAAe,OAAM,UAErB,SAAC,KAAQ,CACPxB,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1CyB,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG,UAEvB,UAAC,KAAS,YACR,SAAC,KAAS,CACRC,aAAa,aACbC,KAAK,cACLC,OAAQ,CAAC,EAAG,GAAK,GAAK,MAExB,SAAC,KAAS,CAACD,KAAK,WAAWC,OAAQ,CAAC,EAAG,GAAK,GAAK,aAKvD,SAAC,KAAsB,CACrBV,GAAG,QACHG,eAAgB,CAAC,EAAG,GACpBQ,SAAU,CAAEC,UAAW,GACvBP,eAAa,EACbC,eAAe,QACfO,eAAgB,CACdC,WAAW,EACXC,YAAa,EAAE,IAAM,KACrBC,QAAS,CAAC,IAAK,MACf,UAEF,SAAC,KAAQ,CAAClC,OAAQA,EAAQmC,aAAa,SAAQ,UAC7C,SAAC,KAAS,WACR,SAAC,KAAS,CAACT,aAAa,aAAaE,OAAQ3B,eAO3D,C","sources":["Geometry/Picking.jsx"],"sourcesContent":["import React, { useRef } from 'react';\n\nimport {\n  View,\n  GeometryRepresentation,\n  PolyData,\n  PointData,\n  DataArray,\n} from 'react-vtk-js';\n\nconst points = [];\nconst scalars = [];\nfor (let i = 0; i < 1000; i++) {\n  scalars.push(Math.random());\n  points.push(Math.random());\n  points.push(Math.random());\n  points.push(Math.random() - 0.5);\n}\n\nlet isSelecting = 0;\n\n// React complains about unique key prop but I don't see why\nfunction Example(props) {\n  const tooltip = useRef(null);\n  const toTooltip = (txt) => {\n    tooltip.current.innerHTML = txt;\n  };\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <pre\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          zIndex: 1,\n          margin: 0,\n        }}\n        ref={tooltip}\n      />\n      <View\n        // pickingModes={['hover', 'click', 'select']}\n        // onClick={(e) => {\n        //   if (isSelecting) {\n        //     isSelecting--;\n        //     return;\n        //   }\n        //   toTooltip(`Click: ${JSON.stringify(e, null, 2)}`);\n        // }}\n        // onHover={(e) => {\n        //   if (isSelecting) {\n        //     return;\n        //   }\n        //   toTooltip(`Hover: ${JSON.stringify(e, null, 2)}`);\n        // }}\n        // onSelect={(e) => {\n        //   isSelecting = 2;\n        //   toTooltip(`Select: ${JSON.stringify(e, null, 2)}`);\n        // }}\n      >\n        <GeometryRepresentation\n          id='plan'\n          mapper={{\n            // colorByArrayName: 'Pressure',\n            // scalarMode: 3,\n            interpolateScalarsBeforeMapping: true,\n          }}\n          colorDataRange={[0, 0.7]}\n          colorMapPreset='Black-Body Radiation'\n          showScalarBar\n          scalarBarTitle='Plan'\n        >\n          <PolyData\n            points={[0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0]}\n            polys={[4, 0, 3, 2, 1]}\n          >\n            <PointData>\n              <DataArray\n                registration='setScalars'\n                name='Temperature'\n                values={[0, 0.7, 0.3, 1]}\n              />\n              <DataArray name='Pressure' values={[1, 0.3, 0.7, 0]} />\n            </PointData>\n          </PolyData>\n        </GeometryRepresentation>\n\n        <GeometryRepresentation\n          id='cloud'\n          colorDataRange={[0, 1]}\n          property={{ pointSize: 5 }}\n          showScalarBar\n          scalarBarTitle='Cloud'\n          scalarBarStyle={{\n            automated: false,\n            boxPosition: [-0.9, -0.95],\n            boxSize: [1.7, 0.25],\n          }}\n        >\n          <PolyData points={points} connectivity='points'>\n            <PointData>\n              <DataArray registration='setScalars' values={scalars} />\n            </PointData>\n          </PolyData>\n        </GeometryRepresentation>\n      </View>\n    </div>\n  );\n}\n\nexport default Example;\n"],"names":["points","scalars","i","push","Math","random","props","tooltip","useRef","style","width","height","position","top","left","zIndex","margin","ref","id","mapper","interpolateScalarsBeforeMapping","colorDataRange","colorMapPreset","showScalarBar","scalarBarTitle","polys","registration","name","values","property","pointSize","scalarBarStyle","automated","boxPosition","boxSize","connectivity"],"sourceRoot":""}